import django
django.setup()
from pantry.models import *

item = FoodItem.objects.get(pk="basil")

#Get a queryset of all substitutions where basil is the original ingredients
item.substitutions.objects.all()

#Get a queryset of all substitutions where basil is in the set of substitute ingredients
Substitution.objects.filter(substitute_foods__substitute_food="basil")


#Get a querySet of all substitutions that can be made from a user's pantry, then all foods items produced by those substitutions or in the user's pantry
from django.db.models import Q
u = User.objects.all()[0]				                         #get the first user (probably the admin/superuser)
pantry = u.pantry.all()					                         #get queryset of the user's pantry
q = ~Q(pantryitem__in = pantry)				                   #make filter for getting all FoodItems not in the user's pantry
foods = FoodItem.objects.filter(q)			                 #get queryset of all FoodItems not in the user's pantry
q2 = ~Q(substitute_foods__substitute_food__in = foods) 	 #make filter for getting all substitutions with a substitute_foods field that contains a SubstituteFood that is in the queryset foods
subs = Substitution.objects.filter(q2)			             #get queryset of filter

all_foods = FoodItem.objects.filter(Q(pantryitem__in = pantry)|Q(substitutions__in = subs)).distinct() #get all foods items produced by those substitutions or in the user's pantry

#NOTE: for the sake of efficiency delay the evaluation of querysets as long as possible!
# See: https://docs.djangoproject.com/en/1.11/topics/db/queries/#querysets-are-lazy
